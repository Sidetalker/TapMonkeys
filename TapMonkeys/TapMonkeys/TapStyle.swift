//
//  TapStyle.swift
//  TapMonkeys
//
//  Created by Kevin Sullivan on 5/15/15.
//  Copyright (c) 2015 SideApps. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class TapStyle : NSObject {

    //// Cache

    private struct Cache {
        static var picShadow: NSShadow = NSShadow(color: UIColor.blackColor().colorWithAlphaComponent(0.8), offset: CGSizeMake(0.1, -0.1), blurRadius: 3)
    }

    //// Shadows

    public class var picShadow: NSShadow { return Cache.picShadow }

    //// Drawing Methods

    public class func drawMainLetter(#character: String) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Letter Drawing
        let letterRect = CGRectMake(0, -0, 28, 28)
        let letterStyle = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        letterStyle.alignment = NSTextAlignment.Center

        let letterFontAttributes = [NSFontAttributeName: UIFont(name: "Noteworthy-Light", size: 27)!, NSForegroundColorAttributeName: UIColor.blackColor(), NSParagraphStyleAttributeName: letterStyle]

        let letterTextHeight: CGFloat = NSString(string: character).boundingRectWithSize(CGSizeMake(letterRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: letterFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, letterRect);
        NSString(string: character).drawInRect(CGRectMake(letterRect.minX, letterRect.minY + (letterRect.height - letterTextHeight) / 2, letterRect.width, letterTextHeight), withAttributes: letterFontAttributes)
        CGContextRestoreGState(context)
    }

    public class func drawBuy(#frame: CGRect, monkeyBuyText: String) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Rectangle Drawing
        let rectangleRect = CGRectMake(frame.minX + 5, frame.minY + 0.5, floor((frame.width - 5) * 0.97959 + 0.5), floor((frame.height - 0.5) * 0.98990 + 0.5))
        let rectanglePath = UIBezierPath(roundedRect: rectangleRect, cornerRadius: 10)
        UIColor.blackColor().setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()
        let rectangleStyle = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        rectangleStyle.alignment = NSTextAlignment.Center

        let rectangleFontAttributes = [NSFontAttributeName: UIFont(name: "AppleSDGothicNeo-SemiBold", size: 14)!, NSForegroundColorAttributeName: UIColor.blackColor(), NSParagraphStyleAttributeName: rectangleStyle]

        let rectangleTextHeight: CGFloat = NSString(string: monkeyBuyText).boundingRectWithSize(CGSizeMake(rectangleRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: rectangleFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, rectangleRect);
        NSString(string: monkeyBuyText).drawInRect(CGRectMake(rectangleRect.minX, rectangleRect.minY + (rectangleRect.height - rectangleTextHeight) / 2, rectangleRect.width, rectangleTextHeight), withAttributes: rectangleFontAttributes)
        CGContextRestoreGState(context)
    }

    public class func drawFingerMonkey() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Image Declarations
        let imgFingerMonkey = UIImage(named: "imgFingerMonkey.jpg")!

        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(5, 5, 90, 90))
        CGContextSaveGState(context)
        CGContextSetPatternPhase(context, CGSizeMake(4, 5))
        UIColor(patternImage: imgFingerMonkey).setFill()
        ovalPath.fill()
        CGContextRestoreGState(context)
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, TapStyle.picShadow.shadowOffset, TapStyle.picShadow.shadowBlurRadius, (TapStyle.picShadow.shadowColor as! UIColor).CGColor)
        UIColor.blackColor().setStroke()
        ovalPath.lineWidth = 0.5
        ovalPath.stroke()
        CGContextRestoreGState(context)
    }

    public class func drawGoofkey() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Image Declarations
        let imgGoofkey = UIImage(named: "imgGoofkey.jpg")!

        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(5, 5, 90, 90))
        CGContextSaveGState(context)
        CGContextSetPatternPhase(context, CGSizeMake(5, 4))
        UIColor(patternImage: imgGoofkey).setFill()
        ovalPath.fill()
        CGContextRestoreGState(context)
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, TapStyle.picShadow.shadowOffset, TapStyle.picShadow.shadowBlurRadius, (TapStyle.picShadow.shadowColor as! UIColor).CGColor)
        UIColor.blackColor().setStroke()
        ovalPath.lineWidth = 0.5
        ovalPath.stroke()
        CGContextRestoreGState(context)
    }

    public class func drawDigitDestroyer() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Image Declarations
        let imgDigitDestroyer = UIImage(named: "imgDigitDestroyer.jpg")!

        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(5, 5, 90, 90))
        CGContextSaveGState(context)
        CGContextSetPatternPhase(context, CGSizeMake(5, 5))
        UIColor(patternImage: imgDigitDestroyer).setFill()
        ovalPath.fill()
        CGContextRestoreGState(context)
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, TapStyle.picShadow.shadowOffset, TapStyle.picShadow.shadowBlurRadius, (TapStyle.picShadow.shadowColor as! UIColor).CGColor)
        UIColor.blackColor().setStroke()
        ovalPath.lineWidth = 0.5
        ovalPath.stroke()
        CGContextRestoreGState(context)
    }

    public class func drawSeaMonkey() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Image Declarations
        let imgSeaMonkey = UIImage(named: "imgSeaMonkey.png")!

        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(5, 5, 90, 90))
        CGContextSaveGState(context)
        CGContextSetPatternPhase(context, CGSizeMake(5, 4))
        UIColor(patternImage: imgSeaMonkey).setFill()
        ovalPath.fill()
        CGContextRestoreGState(context)
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, TapStyle.picShadow.shadowOffset, TapStyle.picShadow.shadowBlurRadius, (TapStyle.picShadow.shadowColor as! UIColor).CGColor)
        UIColor.blackColor().setStroke()
        ovalPath.lineWidth = 0.5
        ovalPath.stroke()
        CGContextRestoreGState(context)
    }

    public class func drawJabbaTheMonkey() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Image Declarations
        let imgJabbaTheMonkey = UIImage(named: "imgJabbaTheMonkey.png")!

        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(5, 5, 90, 90))
        CGContextSaveGState(context)
        CGContextSetPatternPhase(context, CGSizeMake(6, 6))
        UIColor(patternImage: imgJabbaTheMonkey).setFill()
        ovalPath.fill()
        CGContextRestoreGState(context)
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, TapStyle.picShadow.shadowOffset, TapStyle.picShadow.shadowBlurRadius, (TapStyle.picShadow.shadowColor as! UIColor).CGColor)
        UIColor.blackColor().setStroke()
        ovalPath.lineWidth = 0.5
        ovalPath.stroke()
        CGContextRestoreGState(context)
    }

    public class func drawLordVoldermonkey() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Image Declarations
        let imgLordVoldermonkey = UIImage(named: "imgLordVoldermonkey.png")!

        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(5, 5, 90, 90))
        CGContextSaveGState(context)
        CGContextSetPatternPhase(context, CGSizeMake(5, 94))
        UIColor(patternImage: imgLordVoldermonkey).setFill()
        ovalPath.fill()
        CGContextRestoreGState(context)
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, TapStyle.picShadow.shadowOffset, TapStyle.picShadow.shadowBlurRadius, (TapStyle.picShadow.shadowColor as! UIColor).CGColor)
        UIColor.blackColor().setStroke()
        ovalPath.lineWidth = 0.5
        ovalPath.stroke()
        CGContextRestoreGState(context)
    }

    public class func drawWords() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Image Declarations
        let imgWords = UIImage(named: "imgWords.png")!

        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(5, 5, 90, 90))
        CGContextSaveGState(context)
        CGContextSetPatternPhase(context, CGSizeMake(5, 6))
        UIColor(patternImage: imgWords).setFill()
        ovalPath.fill()
        CGContextRestoreGState(context)
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, TapStyle.picShadow.shadowOffset, TapStyle.picShadow.shadowBlurRadius, (TapStyle.picShadow.shadowColor as! UIColor).CGColor)
        UIColor.blackColor().setStroke()
        ovalPath.lineWidth = 0.5
        ovalPath.stroke()
        CGContextRestoreGState(context)
    }

    public class func drawFragmentedSentence() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Image Declarations
        let imgFragmentedSentence = UIImage(named: "imgFragmentedSentence.jpg")!

        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(5, 5, 90, 90))
        CGContextSaveGState(context)
        CGContextSetPatternPhase(context, CGSizeMake(6, 5))
        UIColor(patternImage: imgFragmentedSentence).setFill()
        ovalPath.fill()
        CGContextRestoreGState(context)
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, TapStyle.picShadow.shadowOffset, TapStyle.picShadow.shadowBlurRadius, (TapStyle.picShadow.shadowColor as! UIColor).CGColor)
        UIColor.blackColor().setStroke()
        ovalPath.lineWidth = 0.5
        ovalPath.stroke()
        CGContextRestoreGState(context)
    }

    public class func drawSentence() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Image Declarations
        let imgSentence = UIImage(named: "imgSentence.jpg")!

        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(5, 5, 90, 90))
        CGContextSaveGState(context)
        CGContextSetPatternPhase(context, CGSizeMake(5, 6))
        UIColor(patternImage: imgSentence).setFill()
        ovalPath.fill()
        CGContextRestoreGState(context)
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, TapStyle.picShadow.shadowOffset, TapStyle.picShadow.shadowBlurRadius, (TapStyle.picShadow.shadowColor as! UIColor).CGColor)
        UIColor.blackColor().setStroke()
        ovalPath.lineWidth = 0.5
        ovalPath.stroke()
        CGContextRestoreGState(context)
    }

    public class func drawTextMessage() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Image Declarations
        let imgTextMessage = UIImage(named: "imgTextMessage.png")!

        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(5, 5, 90, 90))
        CGContextSaveGState(context)
        CGContextSetPatternPhase(context, CGSizeMake(5, 5))
        UIColor(patternImage: imgTextMessage).setFill()
        ovalPath.fill()
        CGContextRestoreGState(context)
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, TapStyle.picShadow.shadowOffset, TapStyle.picShadow.shadowBlurRadius, (TapStyle.picShadow.shadowColor as! UIColor).CGColor)
        UIColor.blackColor().setStroke()
        ovalPath.lineWidth = 0.5
        ovalPath.stroke()
        CGContextRestoreGState(context)
    }

    public class func drawTweet() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Image Declarations
        let imgTwitter = UIImage(named: "imgTwitter.png")!

        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(5, 5, 90, 90))
        CGContextSaveGState(context)
        CGContextSetPatternPhase(context, CGSizeMake(3, 94))
        UIColor(patternImage: imgTwitter).setFill()
        ovalPath.fill()
        CGContextRestoreGState(context)
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, TapStyle.picShadow.shadowOffset, TapStyle.picShadow.shadowBlurRadius, (TapStyle.picShadow.shadowColor as! UIColor).CGColor)
        UIColor.blackColor().setStroke()
        ovalPath.lineWidth = 0.5
        ovalPath.stroke()
        CGContextRestoreGState(context)
    }

    public class func drawBaby() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Image Declarations
        let imgBaby = UIImage(named: "imgBaby.png")!

        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(5, 5, 90, 90))
        CGContextSaveGState(context)
        CGContextSetPatternPhase(context, CGSizeMake(4, 95))
        UIColor(patternImage: imgBaby).setFill()
        ovalPath.fill()
        CGContextRestoreGState(context)
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, TapStyle.picShadow.shadowOffset, TapStyle.picShadow.shadowBlurRadius, (TapStyle.picShadow.shadowColor as! UIColor).CGColor)
        UIColor.blackColor().setStroke()
        ovalPath.lineWidth = 0.5
        ovalPath.stroke()
        CGContextRestoreGState(context)
    }

    public class func drawKindergartner() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Image Declarations
        let imgKindergartner = UIImage(named: "imgKindergartner.png")!

        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(5, 5, 90, 90))
        CGContextSaveGState(context)
        CGContextSetPatternPhase(context, CGSizeMake(6, 95))
        UIColor(patternImage: imgKindergartner).setFill()
        ovalPath.fill()
        CGContextRestoreGState(context)
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, TapStyle.picShadow.shadowOffset, TapStyle.picShadow.shadowBlurRadius, (TapStyle.picShadow.shadowColor as! UIColor).CGColor)
        UIColor.blackColor().setStroke()
        ovalPath.lineWidth = 0.5
        ovalPath.stroke()
        CGContextRestoreGState(context)
    }

    public class func drawFourthGrader() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Image Declarations
        let imgFourthGrader = UIImage(named: "imgFourthGrader.png")!

        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(5, 5, 90, 90))
        CGContextSaveGState(context)
        CGContextSetPatternPhase(context, CGSizeMake(6, 95))
        UIColor(patternImage: imgFourthGrader).setFill()
        ovalPath.fill()
        CGContextRestoreGState(context)
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, TapStyle.picShadow.shadowOffset, TapStyle.picShadow.shadowBlurRadius, (TapStyle.picShadow.shadowColor as! UIColor).CGColor)
        UIColor.blackColor().setStroke()
        ovalPath.lineWidth = 0.5
        ovalPath.stroke()
        CGContextRestoreGState(context)
    }

    public class func drawElementaryTeacher() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Image Declarations
        let imgElementaryTeacher = UIImage(named: "imgElementaryTeacher.png")!

        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(5, 5, 90, 90))
        CGContextSaveGState(context)
        CGContextSetPatternPhase(context, CGSizeMake(6, 95))
        UIColor(patternImage: imgElementaryTeacher).setFill()
        ovalPath.fill()
        CGContextRestoreGState(context)
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, TapStyle.picShadow.shadowOffset, TapStyle.picShadow.shadowBlurRadius, (TapStyle.picShadow.shadowColor as! UIColor).CGColor)
        UIColor.blackColor().setStroke()
        ovalPath.lineWidth = 0.5
        ovalPath.stroke()
        CGContextRestoreGState(context)
    }

    public class func drawElementarySchool() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Image Declarations
        let imgElementarySchool = UIImage(named: "imgElementarySchool.png")!

        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(5, 5, 90, 90))
        CGContextSaveGState(context)
        CGContextSetPatternPhase(context, CGSizeMake(6, 95))
        UIColor(patternImage: imgElementarySchool).setFill()
        ovalPath.fill()
        CGContextRestoreGState(context)
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, TapStyle.picShadow.shadowOffset, TapStyle.picShadow.shadowBlurRadius, (TapStyle.picShadow.shadowColor as! UIColor).CGColor)
        UIColor.blackColor().setStroke()
        ovalPath.lineWidth = 0.5
        ovalPath.stroke()
        CGContextRestoreGState(context)
    }

}



extension NSShadow {
    convenience init(color: AnyObject!, offset: CGSize, blurRadius: CGFloat) {
        self.init()
        self.shadowColor = color
        self.shadowOffset = offset
        self.shadowBlurRadius = blurRadius
    }
}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
